import numpy as np
# Define the distributions
guest_dist = {'A': 1./3, 'B': 1./3, 'C': 1./3}
prize_dist = {'A': 1./3, 'B': 1./3, 'C': 1./3}
monty_cpt = {
    ('A', 'A'): {'A': 0.0, 'B': 0.5, 'C': 0.5},
    ('A', 'B'): {'A': 0.0, 'B': 0.0, 'C': 1.0},
    ('A', 'C'): {'A': 0.0, 'B': 1.0, 'C': 0.0},
    ('B', 'A'): {'A': 0.0, 'B': 0.0, 'C': 1.0},
    ('B', 'B'): {'A': 0.5, 'B': 0.0, 'C': 0.5},
    ('B', 'C'): {'A': 1.0, 'B': 0.0, 'C': 0.0},
    ('C', 'A'): {'A': 0.0, 'B': 1.0, 'C': 0.0},
    ('C', 'B'): {'A': 1.0, 'B': 0.0, 'C': 0.0},
    ('C', 'C'): {'A': 0.5, 'B': 0.5, 'C': 0.0}
}
# Helper function to compute joint probability
def joint_probability(guest, prize, monty):
    if guest in guest_dist and prize in prize_dist and monty in monty_cpt[(guest, prize)]:
        return guest_dist[guest] * prize_dist[prize] * monty_cpt[(guest, prize)][monty]
    else:
        return 0.0
# Compute the probability of specific outcomes
def compute_probabilities(outcomes):
    probabilities = []
    for outcome in outcomes:
        g, p, m = outcome
        prob = joint_probability(g, p, m)
        probabilities.append(prob)
    return probabilities
# Compute predictions for incomplete outcomes
def predict(outcomes):
    predictions = []
    for outcome in outcomes:
        g, p, m = outcome
        possible_guests = ['A', 'B', 'C']
        possible_prizes = ['A', 'B', 'C']
        possible_montys = ['A', 'B', 'C']
        if g is None:
            best_guess = max(possible_guests, key=lambda guest: joint_probability(guest, p, m))
            g = best_guess
        if p is None:
            best_prize = max(possible_prizes, key=lambda prize: joint_probability(g, prize, m))
            p = best_prize
        if m is None:
            best_monty = max(possible_montys, key=lambda monty: joint_probability(g, p, monty))
            m = best_monty
        
        predictions.append([g, p, m])
    return predictions
# Test data
outcomes_prob = [['A', 'B', 'C'], ['A', 'A', 'C'], ['A', 'C', 'C']]
outcomes_pred = [['A', None, 'C'], ['A', 'A', None], [None, 'B', 'A']]

# Output the results
print("Probabilities:")
print(compute_probabilities(outcomes_prob))  

print("\nPredictions:")
print(predict(outcomes_pred))  


OUTPUT:-
----------------------------------------
Probabilities:
[0.1111111111111111, 0.05555555555555555, 0.0]

Predictions:
[['A', 'B', 'C'], ['A', 'A', 'B'], ['C', 'B', 'A']]
